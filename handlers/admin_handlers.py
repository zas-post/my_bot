# handlers/admin_handlers.py
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from lexicon.lexicon_ru import LEXICON_RU
from keyboards.admin_keyboards import admin_panel_keyboard
from database.database import get_all_users
from environs import Env
import logging
import asyncio

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Router –∏ Env
router = Router()
env = Env()
env.read_env()

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ .env —Ñ–∞–π–ª–∞
admin_ids = env.list("ADMIN_IDS", subcast=int)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def admin_only(handler):
    async def wrapper(message: types.Message):
        if message.from_user.id not in admin_ids:
            await message.answer(LEXICON_RU["access_denied"])
            return
        return await handler(message)

    return wrapper


# –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π
class BroadcastStates(StatesGroup):
    waiting_for_message = State()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async def broadcast_message_to_users(message, users, message_text):
    tasks = [
        message.bot.send_message(chat_id=user[0], text=message_text) for user in users
    ]
    await asyncio.gather(*tasks, return_exceptions=True)


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /admin
@router.message(Command(commands="admin"))
@admin_only
async def admin_panel(message: types.Message):
    keyboard = admin_panel_keyboard()
    await message.answer(LEXICON_RU["/admin"], reply_markup=keyboard)


# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def process_admin_callback(callback: types.CallbackQuery, action: str):
    if action == "stats":
        users = get_all_users()
        stats_message = (
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}"
            if users
            else LEXICON_RU["no_users_found"]
        )
        await callback.message.edit_text(
            stats_message, reply_markup=admin_panel_keyboard()
        )
    elif action == "user_list":
        users = get_all_users()
        if users:
            user_list = "\n".join(
                [
                    f"{idx + 1}. {user[1]} (ID: {user[0]})"
                    for idx, user in enumerate(users)
                ]
            )
            await callback.message.edit_text(
                text=f"{LEXICON_RU['user_list_message']}\n{user_list}",
                reply_markup=admin_panel_keyboard(),
            )
        else:
            await callback.message.edit_text(
                text=LEXICON_RU["no_users_found"], reply_markup=admin_panel_keyboard()
            )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@router.callback_query(lambda c: c.data == "stats")
@admin_only
async def show_statistics(callback: types.CallbackQuery):
    await process_admin_callback(callback, "stats")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
@router.callback_query(lambda c: c.data == "user_list")
@admin_only
async def show_user_list(callback: types.CallbackQuery):
    await process_admin_callback(callback, "user_list")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"
@router.callback_query(lambda c: c.data == "send_broadcast")
@admin_only
async def send_broadcast(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(LEXICON_RU["broadcast_prompt"], reply_markup=None)
    await callback.answer()
    await state.set_state(BroadcastStates.waiting_for_message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.message(BroadcastStates.waiting_for_message)
@admin_only
async def get_broadcast_message(message: types.Message, state: FSMContext):
    broadcast_message = message.text
    users = get_all_users()

    if not users:
        await message.answer(LEXICON_RU["no_users_found"])
        await state.clear()
        return

    # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç message –≤ —Ñ—É–Ω–∫—Ü–∏—é
    await broadcast_message_to_users(message, users, broadcast_message)

    await message.answer(LEXICON_RU["broadcast_successful"])
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "‚ùå –ó–∞–∫—Ä—ã—Ç—å"
@router.callback_query(lambda callback: callback.data == "close")
@admin_only
async def close_admin_panel(callback: types.CallbackQuery):
    await callback.message.edit_text(
        LEXICON_RU["admin_panel_closed"], reply_markup=None
    )
    await callback.answer()
