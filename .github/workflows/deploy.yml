name: Deploy to Server

on:
  push:
    branches:
      - main  # Запуск workflow при пуше в ветку main
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to Production Server
    runs-on: ubuntu-latest  # Используем стандартный хост GitHub

    steps:
      # Шаг 1. Проверка кода из репозитория
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}  # Используем токен для доступа к репозиторию

      # Шаг 2. Сборка Docker образа на основе указанных инструкций (используем образ python:3.10-alpine3.20)
      - name: Build Docker Image
        run: |
          docker build -t bot_image:latest .  # Изменяем имя образа на bot_image

      # Шаг 3. Настройка SSH для доступа к серверу
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}  # Секрет для приватного ключа

      # Шаг 4. Копирование собранного Docker образа на удаленный сервер
      - name: Copy Docker Image to Server
        run: |
          docker save bot_image:latest | bzip2 | ssh -o StrictHostKeyChecking=no -o IdentitiesOnly=yes -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} 'bunzip2 | docker load'

      # Шаг 5. Развертывание приложения на удаленном сервере с использованием собранного Docker образа
      - name: Deploy Application
        run: |
          ssh -o StrictHostKeyChecking=no -o IdentitiesOnly=yes -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            # Создание директории для проекта, если она еще не существует
            mkdir -p /home/my_bot

            # Переходим в директорию проекта
            cd /home/my_bot

            # Остановка текущего контейнера, если он запущен
            if [ "$(docker ps -q -f name=bot_name)" ]; then
              docker stop bot_name
              docker rm bot_name  # Удаляем контейнер после остановки
            fi

            # Запуск нового контейнера на основе собранного Docker образа
            docker run -it -d \
              --env-file .env \
              --restart=unless-stopped \
              --name bot_name \
              bot_image:latest
          EOF
